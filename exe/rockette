#!/usr/bin/env ruby
# frozen_string_literal: true

require "rockette"

# Set paths
app_path = if File.exist?(File.join("usr", "app")) # Why Docker, why?
              File.join("usr", "app", ".rockette")
            elsif File.exist?(Dir.home)
              File.join(Dir.home, ".rockette")
            else
              no_rockette_dir
           end
lib_path = File.expand_path("../lib", __dir__)
tem_path = File.expand_path("../templates", __dir__)
$LOAD_PATH.unshift(lib_path) unless $LOAD_PATH.include?(lib_path)

# Create directories and config file if needed
Dir.mkdir(app_path) unless File.exist?(app_path)
unless File.exist?(File.join(app_path, "config.yml"))
  template = File.read(File.join(tem_path, "config.yml.erb"))
  data = ERB.new(template).result(binding)
  File.write(File.join(app_path, "config.yml"), data)
end
Dir.mkdir(File.join(app_path, "exports")) unless File.exist?(File.join(app_path, "exports"))

# Load config and set constants
CONF = File.join(app_path, "config.yml")
ENV["THOR_SILENCE_DEPRECATION"] = "true"
EXPORT_DIR = File.join(app_path, "exports")

Signal.trap("INT") do
  warn("\n#{caller.join("\n")}: interrupted")
  exit(1)
end

begin
  Rockette::CLI.start
rescue Rockette::CLI::Error => e
  puts "ERROR: #{e.message}"
  exit 1
end
